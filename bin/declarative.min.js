/*

 declarative - Mapper for declarative user interfaces in HTML - version 1.0

 Copyright 2012, Alex Lawrence
 Licensed under the MIT license.
 http://www.opensource.org/licenses/MIT

*/
(function(c,a){typeof exports==="object"?module.exports=a():typeof define==="function"&&define.amd?define(a):c.declarative=a()})(this,function(){declarative={};(function(){declarative.versionOfInternetExplorer=function(){var c=-1;navigator.appName=="Microsoft Internet Explorer"&&/MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent)!=null&&(c=parseFloat(RegExp.$1));return c}})();(function(){var c=declarative.array={};c.ensureArray=function(a){return c.isArray(a)?a:[a]};c.isArray=function(a){return Object.prototype.toString.call(a)===
"[object Array]"};c.indexOf=function(a,c){for(var e=0,b=a.length;e<b;e++)if(a[e]==c)return e;return-1}})();(function(){declarative.isDOMElement=function(a){return a&&a.nodeType===c};var c=1})();(function(){var c=declarative.versionOfInternetExplorer()!=7;declarative.parseOptions=function(b){try{return e(b)}catch(a){throw Error("declarative.parseOptions: JSON parsing error");}};var a=RegExp(/'/g),g=RegExp(/(^|,)\s*(\w+)\s*:/g),e=c?function(b){b=b.replace(g,'$1"$2":');b=b.replace(a,'"');return JSON.parse("{"+
b+"}")}:function(b){eval("var output = {"+b+"};");return output}})();(function(){var c=declarative.isDOMElement;declarative.getSpecifiedAttributes=function(a){if(!c(a))throw Error("declarative.getSpecifiedAttributes: invalid element (DOM element required)");for(var a=a.attributes,g,e={},b=0,k=a.length;b<k;b++)if(g=a[b],g.specified)e[g.nodeName]=g.nodeValue;return e}})();(function(){var c=declarative.array.isArray,a=declarative.array.ensureArray;declarative.mappings={};var g=declarative.mappingModes=
{attribute:"attribute",element:"element"};declarative.mappings.clear=function(){j={}};declarative.mappings.add=function(h){for(var h=a(h),c=0,f=h.length;c<f;c++){var e=h[c],d=e;d||b("add","invalid options");d.id||b("add","missing id");d.types||b("add","missing types");d.types&&!d.types.push&&b("add","invalid types");(!d.callback||typeof d.callback!=="function")&&b("add","invalid callback");d.mappingMode&&d.mappingMode!==g.attribute&&d.mappingMode!==g.element&&b("add","invalid mappingMode");var i;
a:{i=d.id;var o=void 0;for(o in j)if(j.hasOwnProperty(o)&&o==i){i=true;break a}i=false}i&&b("add",'duplicate id "'+d.id+'"');d=e;d.prefix=d.prefix||"";d.mappingMode=d.mappingMode||g.attribute;d=e;d.prefix=d.prefix.toLowerCase();d.convertedTypes=[];i=0;for(o=d.types.length;i<o;i++){var p=k(d.types[i]);d.convertedTypes.push(d.prefix+p)}j[e.id]=e}};declarative.mappings.getAll=function(){var b=[],a;for(a in j)j.hasOwnProperty(a)&&b.push(j[a]);return b};declarative.mappings.get=function(b){if(!c(b))return e(b);
for(var a=[],k=0,f=b.length;k<f;k++)a.push(e(b[k]));return a};var e=function(a){j[a]||b("get",'invalid id "'+a+'"');return j[a]},b=function(b,a){throw Error("declarative.mappings."+b+": "+a);},k=function(b){return b.replace(f,function(b,a){return"-"+a.toLowerCase()})},j={},f=RegExp(/([A-Z])/g)})();(function(){var c=declarative.array.ensureArray,a=declarative.isDOMElement,g=declarative.mappingModes;declarative.apply=function(b){var a=declarative.mappings.get(b),a=c(a);return{to:function(b){e(a,b)}}};
declarative.applyAll=function(){var b=declarative.mappings.getAll();return{to:function(a){e(b,a)}}};var e=function(b,c){if(!a(c))throw Error("declarative.apply.to: invalid element (DOM object required)");var e;if(c.querySelectorAll){e=c;var f={};f[g.attribute]=[];f[g.element]=[];for(var h=0,m=b.length;h<m;h++){var n=b[h];f[n.mappingMode]=f[n.mappingMode].concat(n.convertedTypes)}(h=f[g.attribute].join("],["))&&(h="["+h+"]");f=f[g.element].join(",");e=e.querySelectorAll(h+(h&&f?",":"")+f)}else e=c.all?
c.all:c.getElementsByTagName("*");for(var h=e.length,l,m=0,n=b.length,d=0,i=0;c;){for(m=0;m<n;m++){f=b[m];for(d=0,i=f.convertedTypes.length;d<i;d++){if(f.mappingMode===g.attribute&&(l=c.getAttributeNode&&c.getAttributeNode(f.convertedTypes[d]))&&l.specified)l=declarative.parseOptions(l.nodeValue),f.callback(c,f.types[d],l);f.mappingMode===g.element&&c.nodeName.toLowerCase()==f.convertedTypes[d]&&(l=declarative.getSpecifiedAttributes(c),f.callback(c,f.types[d],l))}}c=h&&e[--h]}}})();return declarative});
